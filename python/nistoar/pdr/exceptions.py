"""
Exceptions and warnings for the PDR system
"""
from . import PDRSystem

class PDRWarning(Warning, PDRSystem):
    """
    a base class for warnings generated by the preservation system
    """
    pass


class PDRException(Exception, PDRSystem):
    """
    a base class for exceptions occuring in the PDR system
    """
    def __init__(self, msg=None, cause=None):
        if not msg:
            if cause:
                msg = str(cause)
            else:
                msg = "Unknown {0} System Error".format(self.subsystem_abbrev)
        super(PDRException, self).__init__(msg)
        self.cause = cause

class ConfigurationException(PDRException):
    """
    a class indicating an error in the configuration of the PDR system
    """
    pass

class StateException(PDRException):
    """
    a class indicating that the PDR system or environment is in 
    an uncorrectable state preventing proper processing
    """
    pass

class PODError(StateException):
    """
    a problem found in the provided POD data for the dataset
    """
    def __init__(self, msg, cause=None, src=None):
        """
        :param msg   str:   the error message
        :param cause Exception:  an optional underlying cause
        :param src   str:   the name of the file where the data came from
        """
        if src:
            msg += " ({0})".format(src)
        super(PODError, self).__init__(msg, cause)
        self.source = src

class NERDError(StateException):
    """
    a problem found in the provided NERDm data for the dataset
    """
    def __init__(self, msg, cause=None, src=None):
        """
        :param msg   str:   the error message
        :param cause Exception:  an optional underlying cause
        :param src   str:   the name of the file where the data came from
        """
        if src:
            msg += " ({0})".format(src)
        super(NERDError, self).__init__(msg, cause)
        self.source = src

